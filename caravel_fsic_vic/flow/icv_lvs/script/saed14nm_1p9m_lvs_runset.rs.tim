/*	
#########################################################################################
# SAED 32/28NM 1p9m icv lvs  deck							#
#											#
# Revision History:									#
# Rev.		date			what						#
# -------------------------------------------------------------------------------------	#	
# 1.0		02/Feb/2011		(First draft)					#
# 1.1		--/---/2011		Changed tolerances of some device properties	#
# 1.2		21/Feb/2014		Updated for ICV 2013				#
# 1.3           10/Apr/2014		Updates for ICV 2013.06 (edbab@synopsys.com)
# 1.4       12/03/2015      Updated PEX layer mapping to show layers in StarRC OA view
#########################################################################################
*/

#define ICV_REVERT_NETTRAN
#define ICV_REVERT_DEVICE_PROCESSING_LAYER
#define ICV_REVERT_REMOVE_EQUIV_SUM_FILES
#define ICV_REVERT_GENERATE_EQUIV
#define ICV_REVERT_PEX_ALLOW_IMPLICIT_FILENAME
#define ICV_ENABLE_DEVICE_SETTING_APPEND_MODE
#include "icv.rh"
#include "math.rh"

/*#include "./Include/newtype_def.rs"*/

/*       newtype         */
m_st : newtype struct of{
   n: string;
   g: polygon_layer ;
   b: polygon_layer   ;
};

rpd_st : newtype struct of{
   n: string;
   b: polygon_layer ;
   t: polygon_layer   ;
   p: boolean  =true;
   d: boolean  =true;
};

rm_st : newtype struct of{
   n: string;
   b: polygon_layer ;
   t: polygon_layer  ;
  bo: boolean =true;
};

dev_names   :newtype list of string ;
proj_length :newtype list of double ;

inter : newtype enum of {
   ENTERING , LEAVING ,
   ENTERING_LEAVING,
};



/*Defined all needed variables*/




DECK_TYPE : string = "PEX_DECK";
CROSS_REFERENCE : string = "yes";
ICV_RUN_FILE_DIR: string = ".";


openaccess_options(
    view="layout",
    layer_mapping_file= "./../../../SAED14_EDK_LAB/tech/milkyway/saed14nm_1p9m_gdsout.map"
);




library(
    format = GDSII,
    cell = "i2c_master_top",
    library_name = "../../results/i2c_master_top.gds"
);

layout_netl_fh:handle;
device_db:device_database;
xref_db_h:handle;

schem_netl_fh = schematic(

schematic_file    = {{filename = "netlist2spice.sp",format = SPICE}}

);


error_options(db_path="./TOPCELLNAME_err",
create_vue_output=true );

run_options(
instance_prefix="X",
uppercase=false
);

hierarchy_options(flatten={"*"});

resolution_options(snap_resolution=0.001);
text_options(
	net_prefix="N",
	layout_power={"VDD","VDD12","VDD22", "VDD2","VDDG", "VDDH", "VDDL", "VDDIO", "VDDPAD"},
	layout_ground={"VSS","VSS12","VDD22", "VSSIO"}
);
net_options(
schematic_power={"VDD","VDD12","VDD22", "VDD2","VDDG", "VDDH", "VDDL", "VDDIO", "VDDPAD"},
schematic_ground={"VSS","VSS12","VDD22", "VDD2", "VDDH", "VDDL", "VDDIO"},
schematic_global={"VDD","VDD12","VDD22","VSS","VSS12","VDD22", "VDD2","VDDG", "VDDH", "VDDL", "VDDIO", "VSSIO", "VDDPAD"}
);
prototype_options(false);


//////////////////////////////
/* kh: Assign section is the same as drc*/


	FINi    = assign({{1}});
	FINCUTi    = assign({{2}});
	NWELLi    = assign({{3}});
	DNWi	  = assign({{4}});
	DIFFi	  = assign({{5}});	
	DDMYi     = assign({{5,1}});
	PIMPi	  = assign({{6}});
	NIMPi	  = assign({{7}});
	DIFF_15i  = assign({{8}});
	DIFF_18i  = assign({{9}});
	PADi	  = assign({{10}});
	ESDi	  = assign({{11}});
	SBLKi	  = assign({{12}});
	POi       = assign({{13}});
	POCUTi       = assign({{14}});
	PODMYi    = assign({{13,1}});
	TSLCOi    = assign({{15}});
	TSLCBi    = assign({{16}});
	CTM1i       = assign({{17}});
	CTM1i_1       = assign({{17, 1}});
	CTM1i_2       = assign({{17, 2}});
	CPOi       = assign({{18}});
	CPOi_1       = assign({{18, 1}});
	CPOi_2       = assign({{18, 2}});
	VIA0i     = assign({{81}});
	M1i       = assign({{19}});
	M1_3i	  = assign({{90}});		/* poxac */
	M1DMYi    = assign({{19,1}});
	M1i_text  = assign_text({{19}});
	VIA1i     = assign({{20}});
	M2i       = assign({{21}});
	M2_3i	  = assign({{91}});		/* poxac2 */
	M2i_text  = assign_text({{21}});
        VIA2i     = assign({{22}});
	M2DMYi    = assign({{21,1}});
	M3i       = assign({{23}});
	M3_3i       = assign({{92}});		/* poxac3 */
	M3i_text  = assign_text({{23}});
	M3DMYi    = assign({{23,1}});
        VIA3i     = assign({{24}});
	M4i       = assign({{25}});
	M4i_text  = assign_text({{25}}); 
	M4DMYi    = assign({{25,1}});      
        VIA4i     = assign({{26}});
	M5i       = assign({{27}}); 
	M5i_text  = assign_text({{27}});   
        VIA5i     = assign({{28}});
	M6i       = assign({{29}});    
	M6i_text  = assign_text({{29}});
	M6DMYi    = assign({{29,1}});
	VIA6i     = assign({{30}});
	M7i       = assign({{31}});
	M7i_text  = assign_text({{31}});   
	M7DMYi    = assign({{31,1}}); 
	VIA7i     = assign({{32}});
	M8i       = assign({{33}});
	M8i_text  = assign_text({{33}});
	M8DMYi    = assign({{33,1}});
	VIA8i     = assign({{34}});    
	M9i       = assign({{35}});   
	M9i_text  = assign({{35}});
	M9DMYi    = assign({{35,1}});  
	HVTIMPi   = assign({{36}});
	LVTIMPi   = assign({{37}});
	M1PIN     = assign({{38}});
        M1PIN_text = assign_text({{38}});
	M2PIN     = assign({{39}});
	M2PIN_text = assign_text({{39}});
	M3PIN     = assign({{40}});
	M3PIN_text = assign_text({{40}});
	M4PIN     = assign({{41}});
	M4PIN_text = assign_text({{41}});
	M5PIN     = assign({{42}});
	M5PIN_text = assign_text({{42}});
	M6PIN     = assign({{43}});
	M6PIN_text = assign_text({{43}});
	M7PIN     = assign({{44}});
	M7PIN_text = assign_text({{44}});
	M8PIN     = assign({{45}});
	M8PIN_text = assign_text({{45}});
	M9PIN     = assign({{46}});
	M9PIN_text = assign_text({{46}});
	MRDLi      = assign({{47}});
	VIARDLi	   = assign({{48}});
	MRPIN      = assign({{49}});
	HOTNWLi    = assign({{50}});
	DIODi      = assign({{51}});
	BJTMYi     = assign({{52}});
	RNWi      = assign({{53}});
	RMARKi     = assign({{54}});
	LOGO      = assign({{56}});
	IP        = assign({{57}});
	RM1i      = assign({{58}});
	RM2i      = assign({{59}});
	RM3i      = assign({{60}});
	RM4i      = assign({{61}});
	RM5i      = assign({{62}});
	RM6i      = assign({{63}});
	RM7i      = assign({{64}});	
	RM8i      = assign({{65}});
	RM9i      = assign({{66}});
 	CTMMARKi = assign({{79}});
	CBMMARKi  = assign({{78}});
	VARMARKi  = assign({{70}});
	DIFFCUTi      = assign({{82}});
	AXPOLYi      = assign({{83}});
	SLVTIMPi      = assign({{84}});
	FGATEi		= assign({{85}});
	B_VIA0i      = assign({{86}});



/***********************************************/
 slvtimp = copy(SLVTIMPi);
fgate = copy(FGATEi);
b_via0 = copy(B_VIA0i);
 axpoly = copy(AXPOLYi);
 fin   = copy(FINi); 
 fincut   = copy(FINCUTi);
 fin = fin not fincut;
 nwell = copy (NWELLi); 
 dnw   = copy (DNWi  ); 
 diff  = copy (DIFFi );  
 ddmy  = copy (DDMYi ); 
 pimp  = copy (PIMPi );
 nimp  = copy (NIMPi) ; 
 diff_15 = copy (DIFF_15i); 
 diff_18 = copy (DIFF_18i);
 pad = copy (PADi); 
 esd = copy (ESDi);
 sblk = copy (SBLKi);
 po = copy (POi); 
 pocut = copy (POCUTi); 
 podmy = copy (PODMYi); 

 cpo = copy(CPOi);
 ctm1 = copy(CTM1i);

 m1 = copy (M1i );
 m1_3 = M1_3i;		/* poxac */
 m2 = copy (M2i );
 m2_3 = M2_3i;		/* poxac */
 m3 = copy (M3i );
 m3_3 = M3_3i;		/* poxac */ 
 m4 = copy (M4i );
 m5 = copy (M5i );
 m6 = copy (M6i );
 m7 = copy (M7i );
 m8 = copy (M8i );
 m9 = copy (M9i ); 


 via0 = copy (VIA0i); 
 via1 = copy (VIA1i); 
 via2 = copy (VIA2i); 
 via3 = copy (VIA3i); 
 via4 = copy (VIA4i); 
 via5 = copy (VIA5i);
 via6 = copy (VIA6i);
 via7 = copy (VIA7i); 
 via8 = copy (VIA8i);


 diffvia0 = (ctm1 and via0) and (m1 or m1_3);
 b_diffvia0 = (ctm1 and b_via0) and (m1 or m1_3);
 polyvia0 = (cpo and via0) and (m1 or m1_3);

 hvtimp = copy (HVTIMPi); 
 lvtimp = copy ( LVTIMPi);
 hotnwl = copy (HOTNWLi);

 rm1 = copy (RM1i); 
 rm2 = copy (RM2i); 
 rm3 = copy (RM3i); 
 rm4 = copy (RM4i); 
 rm5 = copy (RM5i); 
 rm6 = copy (RM6i); 
 rm7 = copy (RM7i);
 rm8 = copy (RM8i);
 rm9 = copy (RM9i);


 viardl = copy (VIARDLi);
 mrdl   = copy (MRDLi);

 varmark =copy (VARMARKi);
 diod = copy (DIODi);
 bjtmark  = copy (BJTMYi);
 rnw =      copy (RNWi);
 rmark  = copy (RMARKi);
 cbmmark  = copy (CBMMARKi);
 ctmmark  = copy (CTMMARKi);
 //indmark  = copy (INDMARKi);



 m1_pin  = copy (M1PIN);
 m2_pin  = copy (M2PIN);
 m3_pin  = copy (M3PIN);
 m4_pin  = copy (M4PIN);
 m5_pin  = copy (M5PIN);
 m6_pin  = copy (M6PIN);
 m7_pin  = copy (M7PIN);
 m8_pin  = copy (M8PIN);
 m9_pin  = copy (M9PIN);

//***************************Define derived, device and terminal layers************************/

chip = cell_extent ( cell_list = {"*"} );
bulk = size ( chip, 1);

po = po not pocut;

pwell =  not ( bulk , nwell ); 


rnwel    = interacting ( nwell ,  rnw );
dnwnwell = interacting ( nwell ,  dnw );
nwres    = and ( nwell , rnw );

nwnr =     not_interacting (nwell, rnwel, include_touch = ALL);
nwoutdnw = not_interacting (nwell, dnw, include_touch = ALL);


imp =  or ( nimp ,  pimp );
ndiff =  and ( nimp , diff  ) interacting fin;
pdiff=  and ( pimp , diff ) interacting fin;
nact =  and ( ndiff , pwell ) ; 
pact =  and  ( pdiff, nwnr ) ; 
act=    or ( pact  , nact  );
odwr =  interacting  ( diff,  nwres );

/*POLY RESISTORS*/
fpoly = not ( po ,  diff ); 
ponr  = not ( po not axpoly , rmark ); 
//pores = and ( po , rmark ); 
//ponr = and(not(po,axpoly) and rmark ,cpo);
ponr1 = po not axpoly;
ponr2 = ponr1 and rmark;
ponr3 = ponr2 and cpo;
pores = and( not(po,cpo),rmark);

ppores =  and ( pores , pimp ); 
npores =  and ( pores, nimp ); 
ppores_sblk =  and ( ppores , sblk ) ;
npores_sblk =  and ( npores , sblk ) ;

ppores =  not ( ppores , ppores_sblk ) ; 
npores =  not  ( npores, npores_sblk ) ;





/*MOS GATES*/
po_gate = po; 
ngate =  and (po_gate not axpoly, nact); 
pgate =  and (po_gate not axpoly, pact); 
gate  =  or (ngate, pgate); 
{
	@ "Interact of SLVTIMP and DIFF_18 is not allowed";
	interacting( slvtimp, diff_18);
};
{
	@ "Interact of SLVTIMP and DIFF_15 is not allowed";
	interacting( slvtimp, diff_15);
};
{
	@ "Interact of SLVTIMP and HVTIMP is not allowed";
	interacting( slvtimp, hvtimp);
};
{
	@ "Interact of SLVTIMP and LVTIMP is not allowed";
	interacting( slvtimp, lvtimp);
};
{
	@ "Interact of HVTIMP and LVTIMP is not allowed";
	interacting( hvtimp, lvtimp);
};
{
	@ "Interact of HVTIMP and DIFF_15 is not allowed";
	interacting( hvtimp, diff_15);
};
{
	@ "Interact of LVTIMP and DIFF_15 is not allowed";
	interacting( lvtimp, diff_15);
};
{
	@ "Interact of HVTIMP and diff_18 is not allowed";
	interacting( hvtimp, diff_18);

};
{
	@ "Interact of LVTIMP and diff_18 is not allowed";
	interacting( lvtimp, diff_18);

};

ngate_12 = not (ngate, (diff_15 or hvtimp or lvtimp or slvtimp or varmark or diff_18)) ;
pgate_12 = pgate not (diff_15 or hvtimp or lvtimp or slvtimp or varmark or diff_18) ;
gate_12 =   or (ngate_12, pgate_12) ; 

ngate_15 = and ( ngate, diff_15) ; 
pgate_15 = and ( pgate, diff_15) ;
ngate_18 = and ( ngate, diff_18) ;
pgate_18 = and ( pgate, diff_18) ;

gate_15 = or ( ngate_15 , pgate_15) ; 
gate_18 = or ( ngate_18 , pgate_18) ;


ngate_12_lvt = and ( ngate ,lvtimp) ;
pgate_12_lvt = and (pgate, lvtimp) ; 
gate_12_lvt  =or (  ngate_12_lvt , pgate_12_lvt) ; 

ngate_12_hvt = and ( ngate, hvtimp) ; 
pgate_12_hvt = and (pgate , hvtimp) ;
gate_12_hvt  = or (ngate_12_hvt, pgate_12_hvt) ; 

ngate_12_slvt = and ( ngate ,slvtimp) ;
pgate_12_slvt = and (pgate, slvtimp) ; 
gate_12_slvt  =or (  ngate_12_slvt , pgate_12_slvt) ; 

/*TAPS*/
ptap = and (pdiff , pwell) ;  
ntap = and (ndiff , nwnr)  ;


/*SOURCE/DRAIN*/
sd  = not (act , gate) ;
nsd = nact not ((gate or rmark or varmark) or axpoly); 
psd = pact not ((gate or rmark or varmark) or axpoly) ;


/*Define metal resistors*/
m1res = ((m1 or m1_3) and rm1) interacting fin ; 
m2res = ((m2 or m2_3) and rm2) interacting fin ;
m3res = ((m3 or m3_3) and rm3) interacting fin ;
m4res = (m4 and rm4) interacting fin ;
m5res = (m5 and rm5) interacting fin ;
m6res = (m6 and rm6) interacting fin ;
m7res = (m7 and rm7) interacting fin ;
m8res = (m8 and rm8) interacting fin ;
m9res = (m9 and rm9) interacting fin ;


m1 = (m1 or m1_3) not rm1 ; 
m2 = (m2 or m2_3) not rm2 ;
m3 = (m3 or m3_3) not rm3 ;
m4 = m4 not rm4 ;
m5 = m5 not rm5 ;
m6 = m6 not rm6 ;
m7 = m7 not rm7 ;
m8 = m8 not rm8 ;
m9 = m9 not rm9 ;

/*varactor*/
ndif = nimp and diff ; 
pdif = pimp and diff ;

ngate_v = po and ndif ;
pgate_v = po and pdif ;

ngatev = varmark and ngate_v ;
pgatev = varmark and pgate_v ;
ngate_12v = ngatev not (diff_15 or hvtimp or lvtimp or slvtimp or diff_18) ; 
pgate_12v = pgatev not (diff_15 or hvtimp or lvtimp or slvtimp or diff_18) ;

povar   = varmark and po ; 
ngatepl = povar interacting ngate_12v ;
pgatepl = povar interacting pgate_12v ; 

nsdv_ = ndif and varmark ; 
psdv_ = pdif and varmark ;

nsdv  = nsdv_ not ngate_12v ;
psdv  = psdv_ not pgate_12v ;


dores  = diff and rmark ;
pdores = dores and pimp ;
ndores = dores and nimp ;
ndores = ndores not (diff_15 or hvtimp or lvtimp or slvtimp or varmark or diff_18) ; 
pdores = pdores not (diff_15 or hvtimp or lvtimp or slvtimp or varmark or diff_18) ;
pdores_sblk = pdores and sblk ; 
pdores      = pdores not pdores_sblk ; 
ndores_sblk = ndores and sblk ;


/*BOOLEAN ndores NOT ndores_sblk {} TEMP=ndores*/

pactr = pdiff and nwnr ;
nactr = ndiff and pwell ;

psdr  = pactr not (rmark or po) ;
nsdr  = nactr not (rmark or po) ;

/*	Diode Body	*/
diffx =  diff_15 or diff_18;
ndiffx = nimp and diffx;
pdiffx = pimp and diffx;
esddiod = esd and diod;
nactx =  and ( ndiffx , pwell ) ; 
pactx =  and  ( pdiffx, nwnr ) ;
nsdx = nactx not ((gate or rmark or varmark) or axpoly); 
psdx = pactx not ((gate or rmark or varmark) or axpoly) ;

esd_s_pact_donut=donuts(pdiff);						//nd esd added
esd_s_n_don_diff_dio1 = esddiod and esd_s_pact_donut;
esd_s_n_don_diff_dio = esd_s_n_don_diff_dio1 and m1;
esd_s_n_dh_diff_dio2 = donut_holes(esd_s_n_don_diff_dio);
esd_s_n_dh_diff_dio1 = size(esd_s_n_dh_diff_dio2,-0.021);
esd_s_n_dh_diff_dio = interacting(esd_s_n_dh_diff_dio1, nimp);
esd_s_n_dh_diff_dio3 = not_interacting(esd_s_n_dh_diff_dio, pimp);
esd_s_n_dh_diff_dio4 = size(esd_s_n_dh_diff_dio3,0.002);
esdndiffdio = diff inside esd_s_n_dh_diff_dio4;


esd_s_nact_donut=donuts(ndiff);						//pd esd added
esd_s_p_don_diff_dio1 = esddiod and esd_s_nact_donut;
esd_s_p_don_diff_dio = esd_s_p_don_diff_dio1 and m1;
esd_s_p_dh_diff_dio2 = donut_holes(esd_s_p_don_diff_dio);
esd_s_p_dh_diff_dio1 = size(esd_s_p_dh_diff_dio2,-0.021);
esd_s_p_dh_diff_dio = interacting(esd_s_p_dh_diff_dio1, pimp);
esd_s_p_dh_diff_dio3 = not_interacting(esd_s_p_dh_diff_dio, nimp);
esd_s_p_dh_diff_dio4 = size(esd_s_p_dh_diff_dio3,0.002);
esdpdiffdio = diff inside esd_s_p_dh_diff_dio4;


diodx = diod not esd;

s_pact_donut=donuts(pdiff);						//nd simple added
s_n_don_diff_dio1 = diodx and s_pact_donut;
s_n_don_diff_dio = s_n_don_diff_dio1 and m1;
s_n_dh_diff_dio2 = donut_holes(s_n_don_diff_dio);
s_n_dh_diff_dio1 = size(s_n_dh_diff_dio2,-0.021);
s_n_dh_diff_dio = interacting(s_n_dh_diff_dio1, nimp);
s_n_dh_diff_dio3 = not_interacting(s_n_dh_diff_dio, pimp);
s_n_dh_diff_dio4 = size(s_n_dh_diff_dio3,0.002);
ndiffdio = diff inside s_n_dh_diff_dio4;

									//pd simple added
s_nact_donut=donuts(ndiff);
s_p_don_diff_dio1 = diodx and s_nact_donut;
s_p_don_diff_dio = s_p_don_diff_dio1 and m1;
s_p_dh_diff_dio2 = donut_holes(s_p_don_diff_dio);
s_p_dh_diff_dio1 = size(s_p_dh_diff_dio2,-0.021);
s_p_dh_diff_dio = interacting(s_p_dh_diff_dio1, pimp);
s_p_dh_diff_dio3 = not_interacting(s_p_dh_diff_dio, nimp);
s_p_dh_diff_dio4 = size(s_p_dh_diff_dio3,0.002);
pdiffdio = diff inside s_p_dh_diff_dio4;

//Daviti uzatz diodner
esd_pact_donut=donuts(pdiff); 						//big esd pd simple added
esd_p_don_diff_dio1 = esddiod and esd_pact_donut;
esd_p_don_diff_dio = esd_p_don_diff_dio1 and m1;
esd_p_dh_diff_dio = donut_holes(esd_p_don_diff_dio);
esd_p_diff_in_donut = diff inside esd_p_dh_diff_dio;
esd_p_katod = esd_p_diff_in_donut not nimp;
esd_p_anod = esd_p_diff_in_donut not pimp;
esd_pd_nwell = esd_p_dh_diff_dio and nwell;


esd_nact_donut=donuts(ndiff); 						//esd big nd simple added
esd_n_don_diff_dio1 = esddiod and esd_nact_donut;
esd_n_don_diff_dio = esd_n_don_diff_dio1 and m1;
esd_n_dh_diff_dio3 = donut_holes(esd_n_don_diff_dio);
esd_n_dh_diff_dio2 = size(esd_n_dh_diff_dio3, -0.6);
esd_n_dh_diff_dio1 = interacting(esd_n_dh_diff_dio2, nimp);
esd_n_dh_diff_dio = interacting(esd_n_dh_diff_dio1, pimp);
esd_n_dh_diff_dio4 = size(esd_n_dh_diff_dio, 0.6);
esd_n_diff_in_donut = diff inside esd_n_dh_diff_dio4;
esd_n_katod = esd_n_diff_in_donut not pimp;
esd_n_anod = esd_n_diff_in_donut not nimp;
esd_nd_nwell = esd_n_dh_diff_dio and nwell;

pact_donut=donuts(pdiff); 						//big pd simple added
p_don_diff_dio1 = diodx and pact_donut;
p_don_diff_dio = p_don_diff_dio1 and m1;
p_dh_diff_dio = donut_holes(p_don_diff_dio);
p_diff_in_donut = diff inside p_dh_diff_dio;
p_katod = p_diff_in_donut not nimp;
p_anod = p_diff_in_donut not pimp;
pd_nwell = p_dh_diff_dio and nwell;

nact_donut=donuts(ndiff); 						//big nd simple added
n_don_diff_dio1 = diodx and nact_donut;
n_don_diff_dio = n_don_diff_dio1 and m1;
n_dh_diff_dio3 = donut_holes(n_don_diff_dio);
n_dh_diff_dio2 = size(n_dh_diff_dio3, -0.6);
n_dh_diff_dio1 = interacting(n_dh_diff_dio2, nimp);
n_dh_diff_dio = interacting(n_dh_diff_dio1, pimp);
n_dh_diff_dio4 = size(n_dh_diff_dio, 0.6);
n_diff_in_donut = diff inside n_dh_diff_dio4;
n_katod = n_diff_in_donut not pimp;
n_anod = n_diff_in_donut not nimp;
nd_nwell = n_dh_diff_dio and nwell;

//		TO Diode Body

to_esd_s_pact_donut=donuts(pdiffx);						//nd esd added
to_esd_s_n_don_diff_dio1 = esddiod and to_esd_s_pact_donut;
to_esd_s_n_don_diff_dio = to_esd_s_n_don_diff_dio1 and m1;
to_esd_s_n_dh_diff_dio2 = donut_holes(to_esd_s_n_don_diff_dio);
to_esd_s_n_dh_diff_dio1 = size(to_esd_s_n_dh_diff_dio2,-0.021);
to_esd_s_n_dh_diff_dio = interacting(to_esd_s_n_dh_diff_dio1, nimp);
to_esd_s_n_dh_diff_dio3 = not_interacting(to_esd_s_n_dh_diff_dio, pimp);
to_esd_s_n_dh_diff_dio4 = size(to_esd_s_n_dh_diff_dio3,0.002);
to_esdndiffdio = diffx inside to_esd_s_n_dh_diff_dio4;


to_esd_s_nact_donut=donuts(ndiffx);						//pd esd added
to_esd_s_p_don_diff_dio1 = esddiod and to_esd_s_nact_donut;
to_esd_s_p_don_diff_dio = to_esd_s_p_don_diff_dio1 and m1;
to_esd_s_p_dh_diff_dio2 = donut_holes(to_esd_s_p_don_diff_dio);
to_esd_s_p_dh_diff_dio1 = size(to_esd_s_p_dh_diff_dio2,-0.021);
to_esd_s_p_dh_diff_dio = interacting(to_esd_s_p_dh_diff_dio1, pimp);
to_esd_s_p_dh_diff_dio3 = not_interacting(to_esd_s_p_dh_diff_dio, nimp);
to_esd_s_p_dh_diff_dio4 = size(to_esd_s_p_dh_diff_dio3,0.002);
to_esdpdiffdio = diffx inside to_esd_s_p_dh_diff_dio4;


to_s_pact_donut=donuts(pdiffx);						//nd simple added
to_s_n_don_diff_dio1 = diodx and to_s_pact_donut;
to_s_n_don_diff_dio = to_s_n_don_diff_dio1 and m1;
to_s_n_dh_diff_dio2 = donut_holes(to_s_n_don_diff_dio);
to_s_n_dh_diff_dio1 = size(to_s_n_dh_diff_dio2,-0.021);
to_s_n_dh_diff_dio = interacting(to_s_n_dh_diff_dio1, nimp);
to_s_n_dh_diff_dio3 = not_interacting(to_s_n_dh_diff_dio, pimp);
to_s_n_dh_diff_dio4 = size(to_s_n_dh_diff_dio3,0.002);
to_ndiffdio = diffx inside to_s_n_dh_diff_dio4;

							//pd simple added
to_s_nact_donut=donuts(ndiffx);
to_s_p_don_diff_dio1 = diodx and to_s_nact_donut;
to_s_p_don_diff_dio = to_s_p_don_diff_dio1 and m1;
to_s_p_dh_diff_dio2 = donut_holes(to_s_p_don_diff_dio);
to_s_p_dh_diff_dio1 = size(to_s_p_dh_diff_dio2,-0.021);
to_s_p_dh_diff_dio = interacting(to_s_p_dh_diff_dio1, pimp);
to_s_p_dh_diff_dio3 = not_interacting(to_s_p_dh_diff_dio, nimp);
to_s_p_dh_diff_dio4 = size(to_s_p_dh_diff_dio3,0.002);
to_pdiffdio = diffx inside to_s_p_dh_diff_dio4;

//		TO Diode Body second model

to_esd_pact_donut=donuts(pdiffx); 						//big esd pd simple added
to_esd_p_don_diff_dio1 = esddiod and to_esd_pact_donut;
to_esd_p_don_diff_dio = to_esd_p_don_diff_dio1 and m1;
to_esd_p_dh_diff_dio = donut_holes(to_esd_p_don_diff_dio);
to_esd_p_diff_in_donut = diff inside to_esd_p_dh_diff_dio;
to_esd_p_katod = to_esd_p_diff_in_donut not nimp;
to_esd_p_anod = to_esd_p_diff_in_donut not pimp;


to_esd_nact_donut=donuts(ndiffx); 						//esd big nd simple added
to_esd_n_don_diff_dio1 = esddiod and to_esd_nact_donut;
to_esd_n_don_diff_dio = to_esd_n_don_diff_dio1 and m1;
to_esd_n_dh_diff_dio3 = donut_holes(to_esd_n_don_diff_dio);
to_esd_n_dh_diff_dio2 = size(to_esd_n_dh_diff_dio3, -0.6);
to_esd_n_dh_diff_dio1 = interacting(to_esd_n_dh_diff_dio2, nimp);
to_esd_n_dh_diff_dio = interacting(to_esd_n_dh_diff_dio1, pimp);
to_esd_n_dh_diff_dio4 = size(to_esd_n_dh_diff_dio, 0.6);
to_esd_n_diff_in_donut = diff inside to_esd_n_dh_diff_dio4;
to_esd_n_katod = to_esd_n_diff_in_donut not pimp;
to_esd_n_anod = to_esd_n_diff_in_donut not nimp;


to_pact_donut=donuts(pdiffx); 						//big pd simple added
to_p_don_diff_dio1 = diodx and to_pact_donut;
to_p_don_diff_dio = to_p_don_diff_dio1 and m1;
to_p_dh_diff_dio = donut_holes(to_p_don_diff_dio);
to_p_diff_in_donut = diff inside to_p_dh_diff_dio;
to_p_katod = to_p_diff_in_donut not nimp;
to_p_anod = to_p_diff_in_donut not pimp;


to_nact_donut=donuts(ndiffx); 						//big nd simple added
to_n_don_diff_dio1 = diodx and to_nact_donut;
to_n_don_diff_dio = to_n_don_diff_dio1 and m1;
to_n_dh_diff_dio3 = donut_holes(to_n_don_diff_dio);
to_n_dh_diff_dio2 = size(to_n_dh_diff_dio3, -0.6);
to_n_dh_diff_dio1 = interacting(to_n_dh_diff_dio2, nimp);
to_n_dh_diff_dio = interacting(to_n_dh_diff_dio1, pimp);
to_n_dh_diff_dio4 = size(to_n_dh_diff_dio, 0.6);
to_n_diff_in_donut = diff inside to_n_dh_diff_dio4;
to_n_katod = to_n_diff_in_donut not pimp;
to_n_anod = to_n_diff_in_donut not nimp;


/*INDUCTOR*/

sec_top_met  = M3i;
top_met      = M4i;
top_via_poss = VIA3i;
cap_top_via  = CTMMARKi and top_via_poss;
top_via      = VIA3i not cap_top_via;
psub = buildsub ( NWELLi ) ;

rm = rm1 or rm2 or rm3 or rm4 or rm5 or rm6 or rm7 or rm8 or rm9 ;

tiod1  = diff  not po ;
tiod2  = tiod1 not sblk ;
tiod3  = tiod2 not (rmark or bjtmark ) ;
tiod4  = tiod3 not rnw;
tiod   = tiod4 not varmark ; /* RPO, RMARKER, NWDMY cut ti-od */
nodcon = tiod  and nimp;
podcon = tiod  and pimp;
subtie = podcon and psub;

CONTSB = diffvia0 and bjtmark ;
CONTS  = diffvia0 not CONTSB  ;

	
/************* BJT Data Creation Section****************/


/*Vertical PNP Derivation*/

nwell_hole  = donut_holes (nwnr,INNER);
//dnwell_hole = donut_holes (nxwell_DNWELL,INNER);
sab_hole    = donut_holes (sblk,INNER); 

nwell_hole_sab = nwell_hole or sab_hole ;

T_E_M_P_4444 =  bjtmark interacting diff ; 
T_E_M_P_4 = not_interacting (T_E_M_P_4444,sab_hole,include_touch=ALL);


DIFN_BIP = diff and T_E_M_P_4 ;
ALL_BJT_COLL = psub and T_E_M_P_4 ;
psub = psub not ALL_BJT_COLL ; 
T_E_M_P_43 = nwell and bjtmark ; 
l_0V_BJT_BASE_poss = T_E_M_P_43 not (diff_15 or diff_18) ;
T_E_M_P_44 = DIFN_BIP and pimp ;

l_0V_BJT_COLL_poss = ALL_BJT_COLL not (diff_15 or diff_18) ;
l_0V_BJT_COLL = not_interacting (l_0V_BJT_COLL_poss,nwell_hole_sab,include_touch = ALL); 
l_0V_BJT_BASE = not_interacting (l_0V_BJT_BASE_poss,nwell_hole_sab,include_touch = ALL);

l_0V_BJT_EMIT = T_E_M_P_44 and l_0V_BJT_BASE ;


/*Vertical NPN*/
l_0V_BJT_COLL_NPN_poss  = T_E_M_P_4 not (diff_15 or diff_18);
l_0V_BJT_COLL_NPN_poss1 = l_0V_BJT_COLL_NPN_poss interacting nwell_hole; 
l_0V_BJT_COLL_NPN = not_interacting (l_0V_BJT_COLL_NPN_poss1,sab_hole,include_touch = ALL);
l_0V_BJT_BASE_NPN = l_0V_BJT_COLL_NPN not (diff_15 or diff_18) not nwnr and nwell_hole ; 
l_0V_BJT_EMIT_NPN = ((DIFN_BIP not (diff_15 or diff_18)) and nimp) not nwnr and nwell_hole;


/*Contacts for Vertical PNP*/
l_0V_BJT_COLL_cont = l_0V_BJT_COLL not nwnr  and CONTSB;
l_0V_BJT_BASE_cont = l_0V_BJT_BASE and CONTSB and nimp ;
l_0V_BJT_EMIT_cont = l_0V_BJT_EMIT and CONTSB ;

/*Contacts for Vertical NPN*/
l_0V_BJT_COLL_cont_NPN = l_0V_BJT_COLL_NPN  and nwnr and CONTSB;
l_0V_BJT_BASE_cont_NPN = l_0V_BJT_BASE_NPN  and CONTSB not nimp;
l_0V_BJT_EMIT_cont_NPN = l_0V_BJT_EMIT_NPN  and CONTSB ;

/*MOM CAP*/

cv_1a = m1 and m2 ; 
cv_2a = m2 and m3 ;
cv_3a = m3 and m4 ;
cv_4a = m4 and m5 ;


body_1 = ctmmark interacting cv_1a;
body_2 = ctmmark interacting cv_2a;
body_3 = ctmmark interacting cv_3a;
body_4 = ctmmark interacting cv_4a;


termc_1 = cv_1a  interacting body_1;
term_1  = (cv_1a  not body_1)  not_interacting (ctm1 or cpo) ;


termc_2 = cv_2a  interacting body_2;
term_2  = (cv_2a  not body_2) not_interacting (ctm1 or cpo);

termc_3 = cv_3a  interacting body_3;
term_3  = (cv_3a  not body_3) not_interacting (ctm1 or cpo);

termc_4 = cv_4a  interacting body_4;
term_4  = (cv_4a  not body_4) not_interacting (ctm1 or cpo);



subtie = subtie not nwell ;
subtie_scon = copy (subtie);

pwell_cont = copy (ptap);
nwell_cont = copy(ntap);




/*TEXT*/


m1pin_marker = text_origin(M1PIN_text, shape_size = 0.01, text={"*"},cells={"*"});
m2pin_marker = text_origin(M2PIN_text, shape_size = 0.01, text={"*"},cells={"*"});
m3pin_marker = text_origin(M3PIN_text, shape_size = 0.01, text={"*"},cells={"*"});
m4pin_marker = text_origin(M4PIN_text, shape_size = 0.01, text={"*"},cells={"*"});
m5pin_marker = text_origin(M5PIN_text, shape_size = 0.01, text={"*"},cells={"*"});
m6pin_marker = text_origin(M6PIN_text, shape_size = 0.01, text={"*"},cells={"*"});
m7pin_marker = text_origin(M7PIN_text, shape_size = 0.01, text={"*"},cells={"*"});
m8pin_marker = text_origin(M8PIN_text, shape_size = 0.01, text={"*"},cells={"*"});
m9pin_marker = text_origin(M9PIN_text, shape_size = 0.01, text={"*"},cells={"*"});

/*{
@"m1pin_marker";
copy(m1pin_marker);
}
{
@"m2pin_marker";
copy(m2pin_marker);
} */
/***************************Define Connectivity***************************/

c_db = connect (
	connect_items = {

      {{ptap, pwell}}	/*	,pwell_cont}*/,
      {{ntap, nwnr}}	/*	,nwell_cont}*/,
      {{ctm1, cpo}},
      {{nsd,ctm1}},
      {{psd,ctm1}},
      {{nsdx,nsdx}},	//added
      {{psdx,psdx}},	//added

      {{ntap,ctm1}},
      {{ptap,ctm1}},    

      {{nsdr,ctm1}},
      {{psdr,ctm1}},

      {{nsdv,ctm1}},
      {{psdv,ctm1}},	

      {{ngatepl,cpo}},
      {{pgatepl,cpo}},

      {{n_anod,ctm1}},		//added
      {{n_katod,ctm1}},
      {{p_anod,ctm1}},		//added
      {{p_katod,ctm1}},
      {{esd_n_anod,ctm1}},		//added
      {{esd_n_katod,ctm1}},
      {{esd_p_anod,ctm1}},		//added
      {{esd_p_katod,ctm1}},
      {{to_n_anod,ctm1}},		//added
      {{to_n_katod,ctm1}},
      {{to_p_anod,ctm1}},		//added
      {{to_p_katod,ctm1}},
      {{to_esd_n_anod,ctm1}},		//added
      {{to_esd_n_katod,ctm1}},
      {{to_esd_p_anod,ctm1}},		//added
      {{to_esd_p_katod,ctm1}},

      {ngate_12 , ponr},    //////overlap touch
      {pgate_12 , ponr},
      {ngate_15 , ponr},
      {pgate_15 , ponr},
      {ngate_18 , ponr},
      {pgate_18 , ponr},
      {ngate_12_lvt , ponr},
      {pgate_12_lvt , ponr},
      {ngate_12_hvt , ponr},
      {pgate_12_hvt , ponr},
      {ngate_12_slvt , ponr},
      {pgate_12_slvt , ponr},

      {{ponr3,cpo}},
      {{ponr,cpo}},
      {{m1, cpo}		,polyvia0},
      {{m1, ctm1}		,diffvia0},
      {{m1, ctm1}		,b_diffvia0},
      {{m2, m1}		,via1},

      {{m3, m2}		,via2},
      {{m4, m3}		,via3},

      {{m5, m4}		,via4},
      {{m6, m5}		,via5},

      {{m7, m6}		,via6},
      {{m8, m7}		,via7},

      {{m9, m8}		,via8},
      {{mrdl, m9}             ,viardl},
      {{l_0V_BJT_BASE, m1}	,l_0V_BJT_BASE_cont},

      {{l_0V_BJT_COLL, m1}	,l_0V_BJT_COLL_cont},

      {{l_0V_BJT_EMIT, m1}	,l_0V_BJT_EMIT_cont},


      {{l_0V_BJT_COLL_NPN, m1}	,l_0V_BJT_COLL_cont_NPN},
      {{l_0V_BJT_EMIT_NPN, m1}	, diffvia0},
      {{l_0V_BJT_BASE_NPN, m1}	,l_0V_BJT_BASE_cont_NPN},
      /* cap */

      {{m3, term_1}		,via2},
      {{m2, term_1}		,m2},
      {{m1, term_1}		,via1},

      {{m4, term_2}		,via3},
      {{m3, term_2}		,m3},
      {{m2, term_2}		,via2},

      {{m5, term_3}		,via4},
      {{m4, term_3}		,m4},
      {{m3, term_3}		,via3},

      {{m6, term_4}		,via5},
      {{m5, term_4}		,m5},
      {{m4, term_4}		,via4},

      //{{top_metex, sec_top_met}	,top_via},
      //	{{top_metex, sec_top_met} 	,top_via},   //////overlap touch _check

      {{subtie, psub}		,subtie_scon},
      //	{{indterm, m5}		,via4},

      {m1pin_marker, m1},
      {m2pin_marker, m2},
      {m3pin_marker, m3},

      {m4pin_marker, m4},
      {m5pin_marker, m5},
      {m6pin_marker, m6},
      {m7pin_marker, m7},
      {m8pin_marker, m8},
      {m9pin_marker, m9}
	}
	);

    c_db =	 text_net(
    		connect_sequence = c_db,
                rename_prefix="N",                              ////new added
    		text_layer_items = {
    			{m1pin_marker, M1PIN_text},
    			{m2pin_marker, M2PIN_text},
    			{m3pin_marker, M3PIN_text},
    			{m4pin_marker, M4PIN_text},
    			{m5pin_marker, M5PIN_text},
    			{m6pin_marker, M6PIN_text},
    			{m7pin_marker, M7PIN_text},
    			{m8pin_marker, M8PIN_text},
    			{m9pin_marker, M9PIN_text}
		},
	attach_text = ALL
);
 /////////////////////////////////////////////////


c_db = create_ports (
	connect_sequence = c_db,
	port_items = {
                {m1pin_marker, m1pin_marker},
       		{m2pin_marker, m2pin_marker},
       		{m3pin_marker, m3pin_marker},
       		{m4pin_marker, m4pin_marker},
       		{m5pin_marker, m5pin_marker},
       		{m6pin_marker, m6pin_marker},
       		{m7pin_marker, m7pin_marker},
       		{m8pin_marker, m8pin_marker},
       		{m9pin_marker, m9pin_marker}
       		}
);
/*#include "./Include/assign.rs"*/

p_l : list of m_st = { 
{"p08"      , pgate_12,     nwnr},
{"p15"       , pgate_15,     nwnr},
{"p18"       , pgate_18,     nwnr},
{"p08_lvt"  , pgate_12_lvt, nwnr},
{"p08_hvt"  , pgate_12_hvt, nwnr},
{"p08_slvt"  , pgate_12_slvt, nwnr}
 };

n_l : list of m_st = {
{"n08"     , ngate_12     , pwell},
{"n15"      , ngate_15     , pwell},
{"n18"      , ngate_18     , pwell},
{"n08_lvt" , ngate_12_lvt , pwell},
{"n08_hvt" , ngate_12_hvt , pwell},
{"n08_slvt" , ngate_12_slvt , pwell}
};

nmos_list:dev_names = {"n08","n15","n18","n08_lvt","n08_hvt","n08_slvt"};

pmos_list:dev_names = {"p08","p15","p18","p08_lvt","p08_hvt","p08_slvt"};


// kh:  leave rmet1 and rnpoly
resistor_list : list of rpd_st = { 
{"rppoly"     , ppores     ,ponr3},
{"rnpoly"     , npores     ,ponr3,true,false}
 };


rm_l : list of rm_st = { 
{"rm1" ,m1res,m1},
{"rm2" ,m2res,m2},
{"rm3" ,m3res,m3},
{"rm4" ,m4res,m4},
{"rm5" ,m5res,m5},
{"rm6" ,m6res,m6},
{"rm7" ,m7res,m7},
{"rm8" ,m8res,m8}
 /* {"rm9" ,m9res,m9,false}, */
 };
 



/***********************************/
 
if (DECK_TYPE == "LVS_DECK" || DECK_TYPE=="PEX_DECK") 
{

my_devices = init_device_matrix (c_db);      
///////////////
mos_wpe_property : function (
   length       : double,
   width        : double
) returning void {
     gates            = dev_body();
     well             = dev_processing_layer("key1"); //Arthur
    



    tn : integer;
    ln : integer;
    bn : integer;    
    rn : integer;

    tw : list of double = {};
    bw : list of double = {};
    rw : list of double = {};
    lw : list of double = {};

    



    tl_p : list of projection_data_s = {{well, 1, LEAVING, -1}};
    bl_p : list of projection_data_s = {{well, 1, LEAVING, -1}};
    rl_p : list of projection_data_s = {{well, 1, LEAVING, -1}};
    ll_p : list of projection_data_s = {{well, 1, LEAVING, -1}};

    mos_proximity_list(
        body = gates,
        projection_data = tl_p,      
        direction = TOP,
        width = tw,
        count = tn
    );

    mos_proximity_list(
        body = gates,
        projection_data = bl_p,     
        direction = BOTTOM,  
        width = bw,
        count = bn
    );

    mos_proximity_list(
        body = gates,
        projection_data = rl_p,        
        direction = RIGHT,
        width = rw,
        count = rn
    );

    mos_proximity_list(
        body = gates,
        projection_data = ll_p,        
        direction = LEFT,
        width = lw,
        count = ln
    );


    tl = tl_p[0].projection_length;
    bl = bl_p[0].projection_length;
    rl = rl_p[0].projection_length;
    ll = ll_p[0].projection_length;


    W  : list of double = {};
    SC : list of double = {};
    L  : list of double = {};

    for (i=0 to ln-1) {
        W.push_back(lw[i]);
        SC.push_back(ll[i]);
    }
  
    for (i=0 to rn-1) {
        W.push_back(rw[i]);
        SC.push_back(rl[i]);
    }

    w_count : integer = ln + rn - 1;
    l_count : integer = ln + rn;

    for (i=0 to tn-1) {
        L.push_back(tw[i]);
        SC.push_back(tl[i]);
    }

    for (i=0 to bn-1) {
        L.push_back(bw[i]);
        SC.push_back(bl[i]);
    }

    Sx : double = 0;
    Sy : double = 0;
    Sz : double = 0;

 SCref : double =2.5;
    if (w_count != 0) {
        for (i=0 to w_count) {
           if (dbllt(SC[i], SCref)) {
               Sx = Sx + ( W[i] * ( (1/SC[i]) - (1/(SC[i]+length)) ) );
               Sy = Sy +  W[i] *( ( ( (SC[i]/10.0)+(SCref/100.0) ) * 
                          exp((-10)*(SC[i]/SCref)) ) - ( ( ((SC[i]+length)/10.0)+(SCref/100.0) ) * 
                          exp((-10)*((SC[i]+length)/SCref)) ) ); 
               Sz = Sz +  W[i] *( ( ( (SC[i]/20.0)+(SCref/400.0) ) * 
                          exp((-20)*(SC[i]/SCref)) ) - ( ( ((SC[i]+length)/20.0)+(SCref/400.0) ) *  
                          exp((-20)*((SC[i]+length)/SCref)) ) ) ; 
           }
           
        }
    } 

    SCA : double = 0;
    SCB : double = 0;
    SCC : double = 0;
   

    dj : integer = ln + rn;
    for (j=0 to (bn+tn-1)) {
       kk = j + dj;
       if (dbllt(SC[kk], SCref)) { 
           Sx = Sx + ( L[j] * ( (1/SC[kk]) - (1/(SC[kk]+width)) ) );      
           Sy = Sy + L[j] *( ( ( (SC[kk]/10)+(SCref/100) ) * 
                     exp((-10)*(SC[kk]/SCref)) ) - ( ( ((SC[kk]+width)/10)+(SCref/100) ) * 
                     exp((-10)*((SC[kk]+width)/SCref)) ) );
           Sz = Sz + L[j] *( ( ( (SC[kk]/20)+(SCref/400) ) * 
                     exp((-20)*(SC[kk]/SCref)) ) - ( ( ((SC[kk]+width)/20)+(SCref/400) ) * 
                     exp((-20)*((SC[kk]+width)/SCref)) ) );
       }
    }



    SCA = (1/(width*length)) * ((SCref**2) * Sx);
    SCB = (1/(width*length)) * Sy;
    SCC = (1/(width*length)) * Sz;

    


    if( dev_is_property("SCA") ) { dev_save_double_properties({{"SCA", SCA}}); }
    if( dev_is_property("SCB") ) { dev_save_double_properties({{"SCB", SCB}}); }
    if( dev_is_property("SCC") ) { dev_save_double_properties({{"SCC", SCC}}); }



}
///////////

	/*MOSFETS*/

prop_mos : function(void) returning void {

   gate_set = dev_processing_layer("gate");
   fin_set = dev_processing_layer("fin");
   diff_set = dev_processing_layer("sd");

   gate_set_grown = dev_grow_polygon(gate_set, top=100);

   nf : integer = dev_count_polygons(gate_set);	
    l : double  = dev_box_width(gate_set_grown);
    m : integer = dev_count_polygons(diff_set);
   nfin : double = dev_count_polygons(fin_set);
   fpitch : double = 0.05;
  nrd : double  = mos_nrd();
  nrs : double  = mos_nrs();
   asej : double ;
   adej : double ;
   psej : double ;
   pdej : double ;

   asej = mos_source_area();
   adej = mos_drain_area();
   psej = mos_source_perim()+mos_width_1();
   pdej = mos_drain_perim() +mos_width_2();

mos_wpe_property(l, nfin);

    dev_save_double_properties(
        {{"nf", nf},
         {"m", 1},
         {"l" , l},
         {"adej", adej},
         {"asej", asej},
         {"psej", psej},
         {"pdej", pdej},
         {"nrd", nrd},
         {"nrs", nrs},
	 {"fpitch", fpitch},
	 {"nfin", nfin}
        }
    );
};

/*
prop_mos : function(void) returning void {
	gate_set = dev_processing_layer("gate");
	fin_set = dev_processing_layer("fin");

	nf : integer = dev_count_polygons(gate_set);
	l : double = dev_box_width(gate_set);
	nfin : double = dev_count_polygons(fin_set);
	fpitch : double = 0.05;

	dev_save_double_properties(
        {{"l", l},
	 {"nfin", nfin},
	 {"fpitch", fpitch},
	 {"nf", nf}
	}
	);

}
*/
 
foreach (pm in p_l )
{ 
pmos(my_devices,pm.n, psd ,pm.g, psd,{{pm.b}},
//merge_parallel = true,

 //processing_layers={pm.g},
properties = {{"l"  ,   DOUBLE,MICRO},
              {"nfin" ,   DOUBLE },
              {"nf" ,   DOUBLE },
              {"fpitch" ,   DOUBLE },
	      {"m"  ,   DOUBLE },
              {"adej" ,   DOUBLE,PICO },
              {"asej" ,   DOUBLE,PICO },
              {"psej" ,   DOUBLE,MICRO },
              {"pdej" ,   DOUBLE,MICRO },
              {"SCC",   DOUBLE,NONE },
              {"SCA",   DOUBLE,NONE },
              {"SCB",   DOUBLE,NONE },
              {"nrd",   DOUBLE,NONE },
              {"nrs",   DOUBLE,NONE }
            },

property_function = prop_mos,
processing_layer_hash={"key1"=>{nwnr}, "gate"=>{pm.g}, "fin"=>{fin}, "sd"=>{psd}}); //Arthur -> Line 744
};

foreach (nm in n_l )
{
nmos(my_devices,nm.n, nsd ,nm.g, nsd,{{nm.b}},

//merge_parallel = true,

properties = {{"l"  ,   DOUBLE,MICRO},
              {"nfin" ,   DOUBLE },
              {"nf" ,   DOUBLE },
              {"fpitch" ,   DOUBLE },
	      {"m"  ,   DOUBLE },
              {"adej" ,   DOUBLE,PICO },
              {"asej" ,   DOUBLE,PICO },
              {"psej" ,   DOUBLE,MICRO },
              {"pdej" ,   DOUBLE,MICRO },
              {"SCC",   DOUBLE,NONE },
              {"SCA",   DOUBLE,NONE },
              {"SCB",   DOUBLE,NONE },
              {"nrd",   DOUBLE,NONE },
              {"nrs",   DOUBLE,NONE }
  
            },
property_function = prop_mos,
processing_layer_hash={"key1"=>{pwell}, "gate"=>{nm.g}, "fin"=>{fin}, "sd"=>{nsd}} 
//x_card = true
);
};
	
	
	/*Vractor*/
/*
prop_cap : function( void ) returning void {
    w : double = cap_width ();	
    l : double = cap_area()/w;   
  
    dev_save_double_properties(
        {
         {"w", w},
         {"l", l}
        }
    );
};


capacitor(my_devices,"nvar",ngate_12v,ngatepl,nsdv,
   properties = {{"lr",DOUBLE},
                 {"wr",DOUBLE}
                },
   property_function = prop_cap,
schematic_devices={{"nvar","plus","minus"}}
 );

capacitor(my_devices,"pvar",pgate_12v,pgatepl,psdv,
   properties = {{"lr",DOUBLE},
                 {"wr",DOUBLE}
                },
   property_function = prop_cap,
schematic_devices={{"pvar","plus","minus"}} 
 );
*/

 /*RESISTORS*/

prop_respd : function( void ) returning void {     	
    w : double = (res_width_term_a()+ res_width_term_b())/2.0;	
    l : double = (res_area()/w)-0.002 ;

    dev_save_double_properties(
        {
         {"w", w},
         {"l", l}
        }
    );
};


foreach (rr in resistor_list )
{
resistor(my_devices,rr.n,rr.b,rr.t,rr.t,
properties = {{"l",   DOUBLE, MICRO},
              {"w",   DOUBLE, MICRO}
              },

property_function = prop_respd,
schematic_devices ={{rr.n,"A","B"}},
merge_parallel = true,
x_card=true

 );
};





/*DIODES*/
prop_diode: function( void ) returning void {     	
    p=diode_perim ();
    area: double = diode_area();//-(0.524*(p/2-0.524));
    dev_save_double_properties(
        {{"area", area}}
    );
};
np (   my_devices,"nd",ndiffdio ,nsd,pwell ,
   properties =  {{"area", DOUBLE, PICO}},
   property_function = prop_diode
);

nd_func : function(void) returning void {		//added
    p=diode_perim ();
    diff_set = dev_processing_layer("n_diff_in_donut");

    m : integer = dev_count_polygons(diff_set);
    area: double = diode_area();//-(0.524*(p/2-0.524));
    dev_save_double_properties(
        {
         {"m", m},
	 {"area", area}
        }
    );
};

np (   my_devices,"nd",n_anod ,nwnr,n_anod,		//nbody n_diff_in_donut
   properties =  {{"area", DOUBLE, PICO},
			{"m",   DOUBLE, MICRO}},
	property_function = nd_func,
	processing_layer_hash={"n_diff_in_donut"=>{n_diff_in_donut}} 
              

);


pd_func : function(void) returning void {		
    p=diode_perim ();
    diff_set = dev_processing_layer("p_diff_in_donut");

    m : integer = dev_count_polygons(diff_set);
    area: double = diode_area();//-(0.524*(p/2-0.524));
    dev_save_double_properties(
        {
         {"m", m},
	 {"area", area}
        }
    );
};

pn (   my_devices,"pd",p_katod ,nwnr,p_katod ,		//pbody p_diff_in_donut
   properties =  {{"area", DOUBLE, PICO},
			{"m",   DOUBLE, MICRO}},
	property_function = pd_func,
	processing_layer_hash={"p_diff_in_donut"=>{p_diff_in_donut}} 

);

pn (   my_devices,"esdpd",esd_p_katod ,nwnr,esd_p_katod ,		//pbody p_diff_in_donut
   properties =  {{"area", DOUBLE, PICO},
			{"m",   DOUBLE, MICRO}},
	property_function = prop_diode
);

np (   my_devices,"esdnd",esd_n_anod ,nwnr,esd_n_anod,		//nbody n_diff_in_donut
   properties =  {{"area", DOUBLE, PICO},
			{"m",   DOUBLE, MICRO}},
	property_function = prop_diode 
);

pn (   my_devices,"pd",pdiffdio ,nwnr,psd,
   properties =  {{"area", DOUBLE, PICO}},//, Arman
   property_function = prop_diode
);

pnp(  my_devices,"vpnp" ,l_0V_BJT_COLL, l_0V_BJT_BASE, l_0V_BJT_EMIT,x_card=true);
	
npn(my_devices,"hnpn",l_0V_BJT_COLL_NPN ,l_0V_BJT_BASE_NPN,l_0V_BJT_EMIT_NPN,x_card=true);	


//added
np (   my_devices,"esdnd",esdndiffdio ,nsd,pwell ,	
   properties =  {{"area", DOUBLE, PICO},
			{"m",   DOUBLE, MICRO}
              }

);
//added
pn (   my_devices,"esdpd",esdpdiffdio ,nwnr,psd,
   properties =  {{"area", DOUBLE, PICO},
			{"m",   DOUBLE, MICRO}
              }

);

//added
np (   my_devices,"to_esdnd",to_esdndiffdio ,nsdx,pwell ,	
   properties =  {{"area", DOUBLE, PICO},
			{"m",   DOUBLE, MICRO}
              }

);
//added
pn (   my_devices,"to_esdpd",to_esdpdiffdio ,nwnr,psdx,
   properties =  {{"area", DOUBLE, PICO},
			{"m",   DOUBLE, MICRO}
              }

);
pn (   my_devices,"to_pd",to_pdiffdio ,nwnr,psdx,
   properties =  {{"area", DOUBLE, PICO}},//, Arman
   property_function = prop_diode
);
np (   my_devices,"to_nd",to_ndiffdio ,nsdx,pwell ,
   properties =  {{"area", DOUBLE, PICO}},
   property_function = prop_diode
);
// Diod second type TO
//added
np (   my_devices,"to_esdnd",to_esd_n_anod ,nwnr,to_esd_n_anod,	
   properties =  {{"area", DOUBLE, PICO},
			{"m",   DOUBLE, MICRO}
              }

);
//added
pn (   my_devices,"to_esdpd",to_esd_p_katod ,nwnr,to_esd_p_katod,
   properties =  {{"area", DOUBLE, PICO},
			{"m",   DOUBLE, MICRO}
              }

);
pn (   my_devices,"to_pd",to_p_katod ,nwnr,to_p_katod,
   properties =  {{"area", DOUBLE, PICO}},//, Arman
   property_function = prop_diode
);
np (   my_devices,"to_nd",to_n_anod ,nwnr,to_n_anod ,
   properties =  {{"area", DOUBLE, PICO}},
   property_function = prop_diode
);
/* MOM CAP */

calc_momcap_properties : published function (
    void
) returning void
{
    if (dev_is_property("c")) {
        w : double = cap_width();
        l : double = cap_area() / w;

        a : double = cap_area();
        p : double = cap_perim();  
        C : double = 0.0;
        C_area : double = 0.0;
        C_perim : double = 0.0;
        area_capval  : double =  3.83e-17; 
        perim_capval : double =  0.114e-17;

       
        C_area = a * area_capval;        
        C_perim = p * perim_capval*2.8e-7;
        

        C = C_area + C_perim;

        dev_save_double_properties({
          {"c", C},
          {"lvs_a", a}, 
          {"lvs_p", p}, 
          {"lvs_w", w}, 
          {"lvs_l", l}  
        });
    }
}


capacitor(
  my_devices,
  "ccap", body_1,term_1, term_1, 
  schematic_devices={{"ccap","a","b"}},
  x_card=false, merge_parallel = true,
  properties = {  {"c" , DOUBLE,PICO}, 
                  {"lvs_a" , DOUBLE,MICRO}, 
                  {"lvs_p" , DOUBLE,MICRO}, 
                  {"lvs_w" , DOUBLE,MICRO}, 
                  {"lvs_l" , DOUBLE,MICRO} 
                },
  property_function = calc_momcap_properties
  );

capacitor(
  my_devices,
  "ccap", body_2,term_2, term_2,
  schematic_devices={{"ccap","a","b"}},
  x_card=false, merge_parallel = true,
  properties = {  {"c" , DOUBLE,PICO}, 
                  {"lvs_a" , DOUBLE,MICRO}, 
                  {"lvs_p" , DOUBLE,MICRO}, 
                  {"lvs_w" , DOUBLE,MICRO}, 
                  {"lvs_l" , DOUBLE,MICRO} 
                },
  property_function = calc_momcap_properties
  );

capacitor(
  my_devices,
  "ccap", body_3,term_3, term_3,
  schematic_devices={{"ccap","a","b"}},
  x_card=false, merge_parallel = true, 
  properties = {  {"c" , DOUBLE,PICO}, 
                  {"lvs_a" , DOUBLE,MICRO}, 
                  {"lvs_p" , DOUBLE,MICRO}, 
                  {"lvs_w" , DOUBLE,MICRO}, 
                  {"lvs_l" , DOUBLE,MICRO} 
                },
  property_function = calc_momcap_properties
  );

capacitor(
  my_devices,
  "ccap", body_4,term_4, term_4,
  schematic_devices={{"ccap","a","b"}},
  x_card=false, merge_parallel = true, 
  properties = {  {"c" , DOUBLE,PICO}, 
                  {"lvs_a" , DOUBLE,MICRO}, 
                  {"lvs_p" , DOUBLE,MICRO}, 
                  {"lvs_w" , DOUBLE,MICRO}, 
                  {"lvs_l" , DOUBLE,MICRO} 
                },
  property_function = calc_momcap_properties
  );


device_db=extract_devices (my_devices);
layout_netl_fh=netlist(device_db);
}
/*End of if DECK_TYPE=="LVS_DECK" || DECK_TYPE=="PEX_DECK"*/

//compare section//

compare_settings=init_compare_matrix ();



match(compare_settings,
      match_by_net_name=true,
      detect_permutable_ports=false,
      match_condition= {
                layout_ports_without_name=ERROR,
                top_layout_ports_without_name=ERROR,
                port_net_match_non_port_net=ERROR,
                top_schematic_port_net_match_non_port_net=WARNING,
                top_layout_port_net_match_non_port_net=WARNING,
                nets_matched_with_different_name=ERROR,
                ports_matched_with_different_name=ERROR,
                top_ports_matched_with_different_name=ERROR,
                property_mismatch=ERROR,
                equate_by_net_name_fails=ERROR,
                equate_nets_fails=ERROR,
                zero_value_property= ERROR,
                no_global_nets_found= WARNING,
                generate_global_nets=ERROR,
                merging_without_pwr_gnd=ERROR,
                }
);


merge_parallel(compare_settings,CAPACITOR,{"ccap"});

foreach (res in resistor_list )
{
    merge_series(compare_settings,RESISTOR,{res.n});
    merge_parallel(compare_settings,RESISTOR,{res.n});
}

foreach (nn in n_l )
{
  merge_parallel(compare_settings, NMOS, device_names = {nn.n},
                  property_functions = { {"merged_dev_calc" } }
  );
}

foreach (pp in p_l )
{
  merge_parallel(compare_settings, PMOS, device_names = {pp.n},
                  property_functions = { {"merged_dev_calc" } }
  );
}
merge_parallel(compare_settings, NP, device_names = "nd",
                  property_functions = { {"merged_diod_calc" } }	//added
  );

merge_parallel(compare_settings, PN, device_names = "pd"	//added
  );

merge_parallel(compare_settings, NP, device_names = "to_nd",
                  property_functions = { {"merged_diod_calc" } }	//added
  );

merge_parallel(compare_settings, PN, device_names = "to_pd"	//added
  );

merge_parallel(compare_settings, NP, device_names = "esdnd",
                  property_functions = { {"merged_diod_calc" } }	//added
  );

merge_parallel(compare_settings, PN, device_names = "esdpd"	//added
  );

merge_parallel(compare_settings, NP, device_names = "to_esdnd",
                  property_functions = { {"merged_diod_calc" } }	//added
  );

merge_parallel(compare_settings, PN, device_names = "to_esdpd"	//added
  );

check_property(compare_settings,NMOS,
                device_names=nmos_list,

                property_tolerances={{"l",[-0.1,0.1],RELATIVE},
				     {"nfin"},
                                     {"nf"}//, 
//                                     {"m"}  
                }
);

check_property( compare_settings,PMOS,
                device_names=pmos_list,

                property_tolerances={{"l",[-0.1,0.1],RELATIVE},
				      {"nfin"},
                                     {"nf"}// , 
                                    // {"m"}  
                }
);

/*
check_property( compare_settings,
                RESISTOR,
                device_names={"rppoly", "rnpoly","rppoly_wos" ,"rnpoly_wos"},

                property_tolerances={{"w",[-0.5,0.5],RELATIVE},
                                     {"l",[-0.5,0.5],RELATIVE}}
);
*/

check_property( compare_settings,
                CAPACITOR,
                device_names={"ccap"},

                property_tolerances={
                                     {"c",[-0.5,0.5],RELATIVE} 
                                   }
);


//added
check_property( compare_settings,
                NP,
                device_names={"esdnd"},
                property_tolerances={{"area",[-0.5,0.5],RELATIVE},
					{"m"}}
);

//added
check_property( compare_settings,
                PN,
                device_names={"esdpd"},
                property_tolerances={{"area",[-0.5,0.5],RELATIVE},
					{"m"}}
);




check_property( compare_settings,
                PN,
                device_names={"pd"},
                property_tolerances={{"area",[-0.2,0.2],RELATIVE},
					{"m"}}
);


check_property( compare_settings,
                NP,
                device_names={"nd"},
                property_tolerances={{"area",[-0.2,0.2],RELATIVE},
					{"m"}}
);
//added
check_property( compare_settings,
                NP,
                device_names={"to_esdnd"},
                property_tolerances={{"area",[-0.5,0.5],RELATIVE},
					{"m"}}
);

//added
check_property( compare_settings,
                PN,
                device_names={"to_esdpd"},
                property_tolerances={{"area",[-0.5,0.5],RELATIVE},
					{"m"}}
);




check_property( compare_settings,
                PN,
                device_names={"to_pd"},
                property_tolerances={{"area",[-0.2,0.2],RELATIVE},
					{"m"}}
);


check_property( compare_settings,
                NP,
                device_names={"to_nd"},
                property_tolerances={{"area",[-0.2,0.2],RELATIVE},
					{"m"}}
);



check_property( compare_settings,
                PNP,
                device_names={"vpnp"},
                property_tolerances={{"area",[-0.5,0.5],ABSOLUTE}}

);


check_property( compare_settings,
                NPN,
                device_names={"hnpn"},
                property_tolerances={{"area",[-0.5,0.5],ABSOLUTE}}
);


/*
filter(compare_settings,NMOS,nmos_list,filter_options=NMOS_1);

filter(compare_settings,PMOS,pmos_list,filter_options=PMOS_1);

filter(compare_settings,NP,{"nd"},filter_options=NP_1);

filter(compare_settings,PN,{"pd"},filter_options=PN_1);

filter(compare_settings, CAPACITOR ,{"ccap"},filter_options=CAP_1);
*/

/***************************Begin Compare Section************************/



//if( DECK_TYPE=="LVS_DECK" || DECK_TYPE=="PEX_DECK" ) {

  xref_db = compare(
	state = compare_settings,
        schematic=schem_netl_fh,
        layout=layout_netl_fh,
        user_functions_file = "./../script/Include/functions.rs", 
        memory_array_compare =(DECK_TYPE=="PEX_DECK")?(false):(true),
	//remove_equiv_sum_files = NONE,
        write_equiv_netlists   = ALL,
        action_on_error    = EXPLODE,
        remove_dangling_net = LAYOUT_UNTEXTED,
        multiply_width = false,
	push_down_pins = false
	//generate_equiv= {FULL_NAME, CASE_INSENSITIVE_NAME}
    );
//}

spice_netlist_fh=spice_netlist_file("block");
if(DECK_TYPE=="LVS_DECK" || CROSS_REFERENCE=="yes") {
write_xref_spice(device_db,
xref_db=xref_db,
output_file=spice_netlist_fh);
}else{
write_spice(device_db,spice_netlist_fh);
}

if(  DECK_TYPE=="PEX_DECK" ) {

pex_matrix = init_pex_layer_matrix(device_db);
/*conducting_layer*/

pex_conducting_layer_map(pex_matrix, psub, "SUBSTRATE", tagname="psub",
	   lpp_layer    = {lpp_polygon_layer   = "DIFFnotmapped",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, nwnr, "SUBSTRATE", tagname="nwnr",
lpp_layer    = {lpp_polygon_layer   = "NWELL",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "NWELL",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "NWELLn",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, pwell,"SUBSTRATE", tagname="pwell",
lpp_layer    = {lpp_polygon_layer   = "NIMPnotmapped",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "NIMPnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "NIMPnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

//pex_conducting_layer_map(pex_matrix, nwell,"SUBSTRATE", tagname="nwell");
//pex_conducting_layer_map(pex_matrix, diff,"DIFF", tagname="diff",rpsq=0);
//pex_conducting_layer_map(pex_matrix, nact ,"DIFF", tagname="nact",rpsq=0);
//pex_conducting_layecheck_propr_map(pex_matrix, pact ,"DIFF", tagname="pact",rpsq=0);
/*
pex_conducting_layer_map(pex_matrix, pdiffdio,"DIFF", tagname="pdiffdio",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, ndiffdio,"DIFF", tagname="ndiffdio",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);*/

pex_conducting_layer_map(pex_matrix, nsd,"DIFF", tagname="nsd",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, psd,"DIFF", tagname="psd",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);


pex_conducting_layer_map(pex_matrix, nsdx,"DIFF", tagname="nsdx",rpsq=0,		//added
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, psdx,"DIFF", tagname="psdx",rpsq=0,		//added
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, to_n_anod ,"DIFF", tagname="to_n_anod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, to_p_anod ,"DIFF", tagname="to_p_anod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, to_esd_n_anod ,"DIFF", tagname="to_esd_n_anod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, to_esd_p_anod ,"DIFF", tagname="to_esd_p_anod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, to_n_katod ,"DIFF", tagname="to_n_katod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, to_p_katod ,"DIFF", tagname="to_p_katod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, to_esd_n_katod ,"DIFF", tagname="to_esd_n_katod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, to_esd_p_katod ,"DIFF", tagname="to_esd_p_katod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, n_anod ,"DIFF", tagname="n_anod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);


pex_conducting_layer_map(pex_matrix, n_katod ,"DIFF", tagname="n_katod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, p_anod ,"DIFF", tagname="p_anod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, p_katod ,"DIFF", tagname="p_katod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, esd_n_anod ,"DIFF", tagname="esd_n_anod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);


pex_conducting_layer_map(pex_matrix, esd_n_katod ,"DIFF", tagname="esd_n_katod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, esd_p_anod ,"DIFF", tagname="esd_p_anod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, esd_p_katod ,"DIFF", tagname="esd_p_katod",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);


pex_conducting_layer_map(pex_matrix, ntap,"DIFF", tagname="ntap",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, ptap,"DIFF", tagname="ptap",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, psdr,"DIFF", tagname="psdr",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, nsdr,"DIFF", tagname="nsdr",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, nsdv,"DIFF", tagname="nsdv",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, psdv,"DIFF", tagname="psdv",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);


pex_conducting_layer_map(pex_matrix, l_0V_BJT_BASE,"DIFF", tagname="l_0V_BJT_BASE",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, l_0V_BJT_COLL,"DIFF", tagname="l_0V_BJT_COLL",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, l_0V_BJT_EMIT,"DIFF", tagname="l_0V_BJT_EMIT",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, l_0V_BJT_COLL_NPN,"DIFF",
 tagname="l_0V_BJT_COLL_NPN",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, l_0V_BJT_EMIT_NPN,"DIFF",
 tagname="l_0V_BJT_EMIT_NPN",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, l_0V_BJT_BASE_NPN,"DIFF",
 tagname="l_0V_BJT_BASE_NPN",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "DIFFnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "DIFFnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

//pex_conducting_layer_map(pex_matrix, po,   "POLY", tagname="po",rpsq=0);
pex_conducting_layer_map(pex_matrix, ngatepl,"POLY", tagname="ngatepl",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, pgatepl,"POLY", tagname="pgatepl",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, subtie_scon , "SUBSTRATE", tagname="subtie_scon");
pex_conducting_layer_map(pex_matrix, subtie, "SUBSTRATE", tagname="subtie",
lpp_layer    = {lpp_polygon_layer   = "notmapped",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "notmapped",
                   lpp_subnode_purpose = "subnode"}
);
/*
pex_conducting_layer_map(pex_matrix, pdores ,"DIFF", tagname="pdores",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, ndores  ,"DIFF", tagname="ndores ",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "DIFF",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "notmapped",
                   lpp_subnode_purpose = "subnode"}
);
*/
//pex_conducting_layer_map(pex_matrix, pgate,   "POLY", tagname="pgate",rpsq=0);
//pex_conducting_layer_map(pex_matrix, ngate,"POLY", tagname="ngate",rpsq=0);
pex_conducting_layer_map(pex_matrix, ngate_12,"GATE", tagname="ngate_12",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, pgate_12,"GATE", tagname="pgate_12",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, ngate_15,"GATE", tagname="ngate_15",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, pgate_15,"GATE", tagname="pgate_15",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, ngate_18,"GATE", tagname="ngate_18",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, pgate_18,"GATE", tagname="pgate_18",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, ngate_12_lvt,"GATE", tagname="ngate_12_lvt",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, pgate_12_lvt,"GATE", tagname="pgate_12_lvt",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, ngate_12_slvt,"GATE", tagname="ngate_12_slvt",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, pgate_12_slvt,"GATE", tagname="pgate_12_slvt",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, ngate_12_hvt,"GATE", tagname="ngate_12_hvt",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, pgate_12_hvt,"GATE", tagname="pgate_12_hvt",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "PO",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "PO",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, ponr,"POLY", tagname="ponr",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, ponr3,"POLY", tagname="ponr3",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, ppores,"POLY", tagname="ppores",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, npores,"POLY", tagname="npores",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
/*
pex_conducting_layer_map(pex_matrix, ppores_sblk,"POLY", tagname="ppores_sblk",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, npores_sblk,"POLY", tagname="npores_sblk",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "PO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "POnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "POnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
*/

pex_conducting_layer_map(pex_matrix, m1,"M1", tagname="m1",
lpp_layer    = {lpp_polygon_layer   = "M1",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M1notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M1notmapped",
                   lpp_subnode_purpose = "subnode"}
);


pex_conducting_layer_map(pex_matrix, m2,"M2", tagname="m2",
lpp_layer    = {lpp_polygon_layer   = "M2",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M2notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M2notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, m3,   "M3", tagname="m3",
lpp_layer    = {lpp_polygon_layer   = "M3",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M3notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M3notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, m4,   "M4", tagname="m4",
lpp_layer    = {lpp_polygon_layer   = "M4",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M4notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M4notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, m5,   "M5", tagname="m5",
lpp_layer    = {lpp_polygon_layer   = "M5",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M5notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M5notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, m6,   "M6", tagname="m6",
lpp_layer    = {lpp_polygon_layer   = "M6",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M6notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M6notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, m7,   "M7", tagname="m7",
lpp_layer    = {lpp_polygon_layer   = "M7",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M7notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M7notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, m8,   "M8", tagname="m8",
lpp_layer    = {lpp_polygon_layer   = "M8",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M8notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M8notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, m9,   "M9", tagname="m9",
lpp_layer    = {lpp_polygon_layer   = "M9",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M9notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M9notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, mrdl,   "MRDL", tagname="mrdl",//MRDL in map needs 2 be 
lpp_layer    = {lpp_polygon_layer   = "MRDL",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "MRDLnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "MRDLnotmapped",
                   lpp_subnode_purpose = "subnode"}
);


pex_conducting_layer_map(pex_matrix, term_1,"M2", tagname="term1",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "M2",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M2",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M2",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, term_2,"M3", tagname="term2",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "M3",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M3",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M3",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, term_3,"M4", tagname="term3",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "M4",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M4",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M4",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, term_4,"M5", tagname="term4",rpsq=0,
lpp_layer    = {lpp_polygon_layer   = "M5",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M5",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M5",
                   lpp_subnode_purpose = "subnode"}
);



/*-----------------------------------------------------------*/
/* via_layers   */
/*
pex_via_layer_map(pex_matrix, pwell_cont, "SUBCONT", tagname="pwell_cont",
lpp_layer    = {lpp_polygon_layer   = "CTM1",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "CTM1notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "CTM1notmapped",
                   lpp_subnode_purpose = "subnode"}
);//AREA=0.144 RPV=0

pex_via_layer_map(pex_matrix, nwell_cont, "SUBCONT", tagname="nwell_cont",
lpp_layer    = {lpp_polygon_layer   = "CTM1",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "CTM1notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "CTM1notmapped",
                   lpp_subnode_purpose = "subnode"}
);//AREA=0.144 RPV=0
*/

pex_conducting_layer_map(pex_matrix, ctm1, "CTM1", tagname="ctm1",
lpp_layer    = {lpp_polygon_layer   = "CTM1",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "CTM1notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "CTM1notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_conducting_layer_map(pex_matrix, cpo, "CPO", tagname="cpo",
lpp_layer    = {lpp_polygon_layer   = "CPO",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "CPOnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "CPOnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, diffvia0, "DIFFVIA0", tagname="diffvia0",
lpp_layer    = {lpp_polygon_layer   = "VIA0",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA0notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA0notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, b_diffvia0, "DIFFVIA0", tagname="b_diffvia0",
lpp_layer    = {lpp_polygon_layer   = "B_VIA0",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA0notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA0notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, polyvia0, "POLYVIA0", tagname="polyvia0",
lpp_layer    = {lpp_polygon_layer   = "VIA0",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA0notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA0notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, via1, "VIA1", tagname="via1",
lpp_layer    = {lpp_polygon_layer   = "VIA1",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA1notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA1notmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_via_layer_map(pex_matrix, via2, "VIA2", tagname="via2",
lpp_layer    = {lpp_polygon_layer   = "VIA2",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA2notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA2notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, via3, "VIA3", tagname="via3",
lpp_layer    = {lpp_polygon_layer   = "VIA3",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA3notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA3notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, via4, "VIA4", tagname="via4",
lpp_layer    = {lpp_polygon_layer   = "VIA4",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA4notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA4notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, via5, "VIA5", tagname="via5",
lpp_layer    = {lpp_polygon_layer   = "VIA5",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA5notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA5notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, via6, "VIA6", tagname="via6",
lpp_layer    = {lpp_polygon_layer   = "VIA6",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA6notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA6notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, via7, "VIA7", tagname="via7",
lpp_layer    = {lpp_polygon_layer   = "VIA7",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA7notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA7notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, via8, "VIA8", tagname="via8",
lpp_layer    = {lpp_polygon_layer   = "VIA8",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIA8notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIA8notmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_via_layer_map(pex_matrix, viardl,"VIARDL",tagname="viardl",
lpp_layer    = {lpp_polygon_layer   = "VIARDL",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "VIARDLnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "VIARDLnotmapped",
                   lpp_subnode_purpose = "subnode"}
);


pex_conducting_layer_map(pex_matrix, l_0V_BJT_BASE_cont_NPN, "CTM1",
tagname="l_0V_BJT_BASE_cont_NPN",
lpp_layer    = {lpp_polygon_layer   = "CTM1",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "CTM1notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "CTM1notmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, l_0V_BJT_BASE_cont, "CTM1", tagname="l_0V_BJT_BASE_cont",
lpp_layer    = {lpp_polygon_layer   = "CTM1",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "CTM1notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "CTM1notmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, l_0V_BJT_COLL_cont, "CTM1", tagname="l_0V_BJT_COLL_cont",
lpp_layer    = {lpp_polygon_layer   = "CTM1",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "CTM1notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "CTM1notmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, l_0V_BJT_EMIT_cont, "CTM1", tagname="l_0V_BJT_EMIT_cont",
lpp_layer    = {lpp_polygon_layer   = "CTM1",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "CTM1notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "CTM1notmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_conducting_layer_map(pex_matrix, l_0V_BJT_COLL_cont_NPN, "CTM1",
 tagname="l_0V_BJT_COLL_cont_NPN",
lpp_layer    = {lpp_polygon_layer   = "CTM1",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "CTM1notmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "CTM1notmapped",
                   lpp_subnode_purpose = "subnode"}
);

/*marker_layers*/

pex_marker_layer_map(pex_matrix, m1pin_marker,tagname="m1pin_marker",
lpp_layer    = {lpp_polygon_layer   = "M1PIN",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M1PINnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M1PINnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_marker_layer_map(pex_matrix, m2pin_marker,tagname="m2pin_marker",
lpp_layer    = {lpp_polygon_layer   = "M2PIN",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M2PINnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M2PINnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_marker_layer_map(pex_matrix, m3pin_marker,tagname="m3pin_marker",
lpp_layer    = {lpp_polygon_layer   = "M3PIN",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M3PINnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M3PINnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_marker_layer_map(pex_matrix, m4pin_marker,tagname="m4pin_marker",
lpp_layer    = {lpp_polygon_layer   = "M4PIN",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M4PINnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M4PINnotmapped",
                   lpp_subnode_purpose = "subnode"}
);

pex_marker_layer_map(pex_matrix, m5pin_marker,tagname="m5pin_marker",
lpp_layer    = {lpp_polygon_layer   = "M5PIN",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M5PIN",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M5PIN",
                   lpp_subnode_purpose = "subnode"}
);
pex_marker_layer_map(pex_matrix, m6pin_marker,tagname="m6pin_marker",
lpp_layer    = {lpp_polygon_layer   = "M6PIN",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M6PINnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M6PINnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_marker_layer_map(pex_matrix, m7pin_marker,tagname="m7pin_marker",
lpp_layer    = {lpp_polygon_layer   = "M7PIN",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M7PINnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M7PINnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_marker_layer_map(pex_matrix, m8pin_marker,tagname="m8pin_marker",
lpp_layer    = {lpp_polygon_layer   = "M8PIN",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M8PINnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M8PINnotmapped",
                   lpp_subnode_purpose = "subnode"}
);
pex_marker_layer_map(pex_matrix, m9pin_marker,tagname="m9pin_marker",
lpp_layer    = {lpp_polygon_layer   = "M9PIN",
                   lpp_polygon_purpose = "drawing",
                   lpp_port_layer      = "M9PINnotmapped",
                   lpp_port_purpose    = "net",
                   lpp_subnode_layer   = "M9PINnotmapped",
                   lpp_subnode_purpose = "subnode"}
);




pex_lpp_handle = pex_lpp_map_file("pex_lpp_map_file"); 
pex_process_handle = pex_process_map_file("pex_process_map_file"); //+
pex_report_handle = pex_runset_report_file("pex_runset_report_file"); //+
mw_handle = milkyway_library("XTROUT");

pex_generate_results(
    pex_matrix = pex_matrix,
    layout_database = mw_handle,
    pex_process_map_file = pex_process_handle,
    pex_runset_report_file = pex_report_handle,
    pex_lpp_map_file = pex_lpp_handle
);
}
